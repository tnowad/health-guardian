server:
  port: 8080
  address: localhost
  servlet:
    encoding:
      charset: UTF-8

jwt:
  accessSignerKey: ${ACCESS_SIGNER_KEY:defaultAccessSignerKey}
  refreshSignerKey: ${REFRESH_SIGNER_KEY:defaultRefreshSignerKey}
  valid-duration: 2592000
  refreshable-duration: 2592000

brevo-mail:
  from-mail: ${FROM_MAIL:defaultFromEmail@example.com}
  url: https://api.brevo.com
  api-key: ${BREVO_API_KEY:defaultApiKey}
  server-url: http://localhost:${server.port}

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
  show-actuator: true

minio:
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin
  bucket-name: sports-field-booking-bucket
  temp-bucket-name: sports-field-booking-temp-bucket

openapi:
  service:
    api-docs: rest-api-service-dev
    title: health-guardian-server REST API
    description: This is the API documentation for health-guardian-server
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path:/}
    server-description: Health guardian Backend API service For Development

spring:
  application:
    name: health-guardian-server
  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
  config:
    import: file:env.properties
  datasource:
    url: jdbc:postgresql://localhost:5432/health-guardian
    username: health-guardian
    password: admin
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  cache:
    type: redis
  data:
    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:localhost}
      database: 0
  mail:
    from: ${FROM_MAIL}
    host: smtp.gmail.com
    port: 587
    username: ${FROM_MAIL}
    password: ${SMTP_PASSWORD} # wzjg pkgh yvmv noyz
    default-encoding: UTF-8
    properties:
      mail:
        mime:
          charset: UTF
        smtp:
          writetimeout: 10000
          connectiontimeout: 10000
          timeout: 10000
          auth: true
          starttls:
            enable: true
            required: true
  #configure google login
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_SECRET_KEY}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
  #configure google ai
  dialogflow:
    project-id: health-guardian-439302
    language-code: vi
    credentials: classpath:health-guardian-439302-4ff9782bd0a5.json

kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
  mail-consumer:
    group-id: send-mail-group
    auto-offset-reset: earliest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  file-consumer:
    group-id: handle-file-group
    auto-offset-reset: latest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
      springframework:
        security: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
